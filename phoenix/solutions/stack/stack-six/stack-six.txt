/*
 * phoenix/stack-six, by https://exploit.education
 *
 * Can you execve("/bin/sh", ...) ?
 *
 * Why do fungi have to pay double bus fares? Because they take up too
 * mushroom.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

(input)127 + (greeting)34 = 162
reserved stack: 168 
-> we can modified the last 2 bytes of the pushed rbp

#define BANNER \
  "Welcome to " LEVELNAME ", brought to you by https://exploit.education"

char *what = GREET;

char *greet(char *who) {
  char buffer[128];
  int maxSize;

  maxSize = strlen(who);
  if (maxSize > (sizeof(buffer) - /* ensure null termination */ 1)) {
    maxSize = sizeof(buffer) - 1;
  }

  strcpy(buffer, what);
  strncpy(buffer + strlen(buffer), who, maxSize);

  return strdup(buffer);
}

int main(int argc, char **argv) {
  char *ptr;
  printf("%s\n", BANNER);

#ifdef NEWARCH
  if (argv[1]) {
    what = argv[1];
  }
#endif

  ptr = getenv("ExploitEducation");
  if (NULL == ptr) {
    // This style of comparison prevents issues where you may accidentally
    // type if(ptr = NULL) {}..

    errx(1, "Please specify an environment variable called ExploitEducation");
  }

  printf("%s\n", greet(ptr));
  return 0;
}

main:  
0x000000000040079b <+0>:	push   rbp
0x000000000040079c <+1>:	mov    rbp,rsp
0x000000000040079f <+4>:	sub    rsp,0x20
0x00000000004007a3 <+8>:	mov    DWORD PTR [rbp-0x14],edi
0x00000000004007a6 <+11>:	mov    QWORD PTR [rbp-0x20],rsi
0x00000000004007aa <+15>:	mov    edi,0x400878
0x00000000004007af <+20>:	call   0x400530 <puts@plt>
0x00000000004007b4 <+25>:	mov    edi,0x4008c2
0x00000000004007b9 <+30>:	call   0x400520 <getenv@plt>
0x00000000004007be <+35>:	mov    QWORD PTR [rbp-0x8],rax
0x00000000004007c2 <+39>:	cmp    QWORD PTR [rbp-0x8],0x0
0x00000000004007c7 <+44>:	jne    0x4007dd <main+66>
0x00000000004007c9 <+46>:	mov    esi,0x4008d8
0x00000000004007ce <+51>:	mov    edi,0x1
0x00000000004007d3 <+56>:	mov    eax,0x0
0x00000000004007d8 <+61>:	call   0x400540 <errx@plt>
0x00000000004007dd <+66>:	mov    rax,QWORD PTR [rbp-0x8]
0x00000000004007e1 <+70>:	mov    rdi,rax
0x00000000004007e4 <+73>:	call   0x4006fd <greet>

// We can change the least significant byte of the return rbp here
// So when it returns to main, rbp can point to a new location and the word previous to it will be the return of main.
// We can write the shellcode in the assigned stack and also the return address to point to the shell code, we need to point the returned rbp to thit

// Objective:
1: shellcode
2: rbp for shellcode
3: 1 // the redirected return address
4: padding
5: modified rbp -> 2 

0x00000000004007e9 <+78>:	mov    rdi,rax
0x00000000004007ec <+81>:	call   0x400530 <puts@plt>
0x00000000004007f1 <+86>:	mov    eax,0x0
0x00000000004007f6 <+91>:	leave  
0x00000000004007f7 <+92>:	ret    


greet:
0x00000000004006fd <+0>:	push   rbp
0x00000000004006fe <+1>:	mov    rbp,rsp
0x0000000000400701 <+4>:	push   rbx
0x0000000000400702 <+5>:	sub    rsp,168
0x0000000000400709 <+12>:	mov    QWORD PTR [rbp-0xa8],rdi
0x0000000000400710 <+19>:	mov    rax,QWORD PTR [rbp-0xa8]
0x0000000000400717 <+26>:	mov    rdi,rax
0x000000000040071a <+29>:	call   0x400580 <strlen@plt>
0x000000000040071f <+34>:	mov    DWORD PTR [rbp-0x14],eax
0x0000000000400722 <+37>:	mov    eax,DWORD PTR [rbp-0x14]
0x0000000000400725 <+40>:	cmp    eax,0x7f
0x0000000000400728 <+43>:	jbe    0x400731 <greet+52>
0x000000000040072a <+45>:	mov    DWORD PTR [rbp-0x14],0x7f
0x0000000000400731 <+52>:	mov    rdx,QWORD PTR [rip+0x200458]        # 0x600b90 <what>
0x0000000000400738 <+59>:	lea    rax,[rbp-0xa0]
0x000000000040073f <+66>:	mov    rsi,rdx
0x0000000000400742 <+69>:	mov    rdi,rax
0x0000000000400745 <+72>:	call   0x400510 <strcpy@plt>
0x000000000040074a <+77>:	mov    eax,DWORD PTR [rbp-0x14]
0x000000000040074d <+80>:	movsxd rbx,eax
0x0000000000400750 <+83>:	lea    rax,[rbp-0xa0]
0x0000000000400757 <+90>:	mov    rdi,rax
0x000000000040075a <+93>:	call   0x400580 <strlen@plt>
0x000000000040075f <+98>:	mov    rdx,rax
0x0000000000400762 <+101>:	lea    rax,[rbp-160]
0x0000000000400769 <+108>:	lea    rcx,[rax+rdx*1]
0x000000000040076d <+112>:	mov    rax,QWORD PTR [rbp-168]
0x0000000000400774 <+119>:	mov    rdx,rbx
0x0000000000400777 <+122>:	mov    rsi,rax
0x000000000040077a <+125>:	mov    rdi,rcx
0x000000000040077d <+128>:	call   0x400550 <strncpy@plt>
0x0000000000400782 <+133>:	lea    rax,[rbp-0xa0]
0x0000000000400789 <+140>:	mov    rdi,rax
0x000000000040078c <+143>:	call   0x400560 <strdup@plt>
0x0000000000400791 <+148>:	add    rsp,168
0x0000000000400798 <+155>:	pop    rbx
0x0000000000400799 <+156>:	pop    rbp
0x000000000040079a <+157>:	ret  
